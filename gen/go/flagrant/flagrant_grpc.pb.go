// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.2
// source: flagrant/flagrant.proto

package flagrant

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmailReminderServiceClient is the client API for EmailReminderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmailReminderServiceClient interface {
	SendNotificationsAll(ctx context.Context, in *SendNotificationsAllRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	SendNotificationsGroup(ctx context.Context, in *SendNotificationsGroupRequest, opts ...grpc.CallOption) (*BaseResponse, error)
}

type emailReminderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailReminderServiceClient(cc grpc.ClientConnInterface) EmailReminderServiceClient {
	return &emailReminderServiceClient{cc}
}

func (c *emailReminderServiceClient) SendNotificationsAll(ctx context.Context, in *SendNotificationsAllRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/flagrant.EmailReminderService/SendNotificationsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailReminderServiceClient) SendNotificationsGroup(ctx context.Context, in *SendNotificationsGroupRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/flagrant.EmailReminderService/SendNotificationsGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailReminderServiceServer is the server API for EmailReminderService service.
// All implementations must embed UnimplementedEmailReminderServiceServer
// for forward compatibility
type EmailReminderServiceServer interface {
	SendNotificationsAll(context.Context, *SendNotificationsAllRequest) (*BaseResponse, error)
	SendNotificationsGroup(context.Context, *SendNotificationsGroupRequest) (*BaseResponse, error)
	mustEmbedUnimplementedEmailReminderServiceServer()
}

// UnimplementedEmailReminderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmailReminderServiceServer struct {
}

func (UnimplementedEmailReminderServiceServer) SendNotificationsAll(context.Context, *SendNotificationsAllRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotificationsAll not implemented")
}
func (UnimplementedEmailReminderServiceServer) SendNotificationsGroup(context.Context, *SendNotificationsGroupRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotificationsGroup not implemented")
}
func (UnimplementedEmailReminderServiceServer) mustEmbedUnimplementedEmailReminderServiceServer() {}

// UnsafeEmailReminderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailReminderServiceServer will
// result in compilation errors.
type UnsafeEmailReminderServiceServer interface {
	mustEmbedUnimplementedEmailReminderServiceServer()
}

func RegisterEmailReminderServiceServer(s grpc.ServiceRegistrar, srv EmailReminderServiceServer) {
	s.RegisterService(&EmailReminderService_ServiceDesc, srv)
}

func _EmailReminderService_SendNotificationsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotificationsAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailReminderServiceServer).SendNotificationsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flagrant.EmailReminderService/SendNotificationsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailReminderServiceServer).SendNotificationsAll(ctx, req.(*SendNotificationsAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailReminderService_SendNotificationsGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotificationsGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailReminderServiceServer).SendNotificationsGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flagrant.EmailReminderService/SendNotificationsGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailReminderServiceServer).SendNotificationsGroup(ctx, req.(*SendNotificationsGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmailReminderService_ServiceDesc is the grpc.ServiceDesc for EmailReminderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailReminderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flagrant.EmailReminderService",
	HandlerType: (*EmailReminderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendNotificationsAll",
			Handler:    _EmailReminderService_SendNotificationsAll_Handler,
		},
		{
			MethodName: "SendNotificationsGroup",
			Handler:    _EmailReminderService_SendNotificationsGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flagrant/flagrant.proto",
}
